package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
)

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
func wsHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("üì° WebSocket: New connection attempt")

	query := r.URL.Query()
	token := query.Get("token")
	chatIDParam := query.Get("chat_id")

	if token == "" || chatIDParam == "" {
		http.Error(w, "Missing token or chat_id", http.StatusBadRequest)
		log.Println("‚ùå Missing token or chat_id")
		return
	}

	chatID := parseChatID(chatIDParam)
	if chatID == 0 {
		http.Error(w, "Invalid chat_id", http.StatusBadRequest)
		log.Println("‚ùå Invalid chat_id format")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ WebSocket
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("‚ùå WebSocket upgrade error:", err)
		return
	}
	defer conn.Close()

	log.Printf("‚úÖ WebSocket connected to ChatID: %d", chatID)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	mu.Lock()
	clients[chatID] = conn
	mu.Unlock()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	sendChatHistory(chatID, conn)

	// –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for {
		var msg ChatMessage
		if err := conn.ReadJSON(&msg); err != nil {
			log.Println("‚ùå WebSocket read error:", err)
			break
		}

		msg.ChatID = chatID
		msg.Time = time.Now().Format("15:04:05")

		log.Printf("üì® Message received: %+v", msg)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		saveMessageToDB(msg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
		broadcast <- msg
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
	mu.Lock()
	delete(clients, chatID)
	mu.Unlock()

	log.Printf("‚ùå WebSocket disconnected from ChatID: %d", chatID)
}

// üì° –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
func handleMessages() {
	for {
		msg := <-broadcast
		mu.Lock()
		if conn, ok := clients[msg.ChatID]; ok {
			if err := conn.WriteJSON(msg); err != nil {
				log.Println("‚ùå Error sending message:", err)
				conn.Close()
				delete(clients, msg.ChatID)
			}
		}
		mu.Unlock()
	}
}

// üóÉÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func saveMessageToDB(msg ChatMessage) {
	newMsg := Message{
		ChatID:    msg.ChatID,
		UserID:    0, // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ userID –∏–∑ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		Sender:    msg.Sender,
		Content:   msg.Content,
		Timestamp: time.Now(),
	}

	if err := db.Create(&newMsg).Error; err != nil {
		log.Printf("‚ùå Error saving message to database: %v", err)
	} else {
		log.Printf("üíæ Message saved to DB for ChatID %d", msg.ChatID)
	}
}

// üìú –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
func sendChatHistory(chatID uint, conn *websocket.Conn) {
	var messages []Message
	if err := db.Where("chat_id = ?", chatID).Order("timestamp asc").Find(&messages).Error; err != nil {
		log.Println("‚ùå Error retrieving chat history:", err)
		return
	}

	for _, message := range messages {
		msg := ChatMessage{
			ChatID:  message.ChatID,
			Sender:  message.Sender,
			Content: message.Content,
			Time:    message.Timestamp.Format("15:04:05"),
		}
		if err := conn.WriteJSON(msg); err != nil {
			log.Println("‚ùå Error sending chat history:", err)
			return
		}
	}
	log.Printf("üìú Chat history sent to ChatID: %d", chatID)
}

// üõë –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
func closeChatHandler(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	chatID := parseChatID(query.Get("chat_id"))

	if chatID == 0 {
		http.Error(w, "Invalid chat ID", http.StatusBadRequest)
		return
	}

	db.Model(&Chat{}).Where("id = ?", chatID).Update("status", "inactive")

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	mu.Lock()
	if conn, ok := clients[chatID]; ok {
		conn.Close()
		delete(clients, chatID)
	}
	mu.Unlock()

	log.Printf("üö´ Chat %d closed by admin", chatID)
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(fmt.Sprintf("Chat %d closed", chatID)))
}

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func getActiveChatsHandler(w http.ResponseWriter, r *http.Request) {
	var activeChats []Chat
	db.Where("status = ?", "active").Find(&activeChats)

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(activeChats)
}

// üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func createChatHandler(w http.ResponseWriter, r *http.Request) {
	userID := 1 // –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π userID –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

	var existingChat Chat
	if err := db.Where("user_id = ? AND status = ?", userID, "active").First(&existingChat).Error; err == nil {
		log.Printf("‚ö†Ô∏è Active chat already exists for user %d", userID)
		json.NewEncoder(w).Encode(existingChat)
		return
	}

	newChat := Chat{
		UserID:    uint(userID), // –ü—Ä–∏–≤–æ–¥–∏–º int –∫ uint
		Status:    "active",
		CreatedAt: time.Now(),
	}

	if err := db.Create(&newChat).Error; err != nil {
		http.Error(w, "Failed to create chat", http.StatusInternalServerError)
		return
	}

	log.Printf("‚úÖ New chat created with ID: %d for User: %d", newChat.ID, userID)
	json.NewEncoder(w).Encode(newChat)
}

// üìå –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ chat_id
func parseChatID(param string) uint {
	var chatID uint
	_, err := fmt.Sscanf(param, "%d", &chatID)
	if err != nil {
		log.Printf("‚ùå Error parsing chat_id: %v", err)
		return 0
	}
	return chatID
}
